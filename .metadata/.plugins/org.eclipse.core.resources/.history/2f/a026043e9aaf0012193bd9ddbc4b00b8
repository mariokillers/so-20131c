/*
 * Server.c
 *
 *  Created on: 27/04/2013
 *      Author: utnso
 */
#include "Server.h"


/*
 * @NAME: initServer
 * @DESC: Inicializa un servidor en el puerto indicado como parametro. Devuelve 0
 */
int initServer(int MYPORT){


		////PIDO EL SOCKET
		if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
			perror("socket");
			exit(1);
		}

		////SETEO CONFIGURACIONES DE IP + PUERTO
		my_addr.sin_family = AF_INET; 		  // Ordenaci칩n de bytes de la m치quina
		my_addr.sin_port = htons(MYPORT); 	  // short, Ordenaci칩n de bytes de la	red
		my_addr.sin_addr.s_addr = INADDR_ANY; // Rellenar con mi direcci칩n IP
		memset(&(my_addr.sin_zero), '\0', 8); // Poner a cero el resto de la estructura

		////ASIGNO AL SOCKET LAS CONFIGURACIONES DE IP + PUERTO
		if (bind(sockfd, (struct sockaddr *)&my_addr, sizeof(struct sockaddr)) == -1) {
			perror("bind");
			exit(1);
		}

		////HAGO EL SOCKET NO BLOQUEANTE

		  if ((make_socket_non_blocking (sockfd)) == -1)
		    abort ();

		////LISTEN (BACKLOG => MAX CANTIDAD DE CLIENTES EN COLA)
		if (listen(sockfd, BACKLOG) == -1) {
			perror("listen");
			exit(1);
		}

		////CREO LA INSTANCIA DE EPOLL
		if ((instancia_epoll = epoll_create1 (0)) == -1) {
			perror ("epoll_create");
			exit(1);
		}

		////ASOCIO LOS FD DE LA CONEXION MAESTRA
		event.data.fd = sockfd;
		event.events = EPOLLIN | EPOLLET | EPOLLRDHUP;

		////ASIGNO EL CCONTROL DE EPOLL
		if ((epoll_ctl (instancia_epoll, EPOLL_CTL_ADD, sockfd, &event)) == -1) {
		    perror ("epoll_ctl");
		    exit(1);
		}

		////RESERVO ESPACIO PARA LAS CONEXIONES
		events = calloc (MAXEVENTS, sizeof event);

		return 0;
}

//////PRIVATE

void Cerrar_Conexion (int fd){

	printf ("Closed connection on descriptor %d\n", fd);
	//CIERRO CONEXION
	close (fd);

}


static int make_socket_non_blocking (int sfd)
{
  int flags, s;

  flags = fcntl (sfd, F_GETFL, 0);
  if (flags == -1)
    {
      perror ("fcntl");
      return -1;
    }

  flags |= O_NONBLOCK;
  s = fcntl (sfd, F_SETFL, flags);
  if (s == -1)
    {
      perror ("fcntl");
      return -1;
    }

  return 0;
}
